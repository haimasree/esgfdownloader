#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by esgf-node.llnl.gov - 2022/07/25 05:56:33
# Search URL: https://esgf-node.llnl.gov/esg-search/wget/?distrib=false&dataset_id=CMIP6.CMIP.CCCma.CanESM5.historical.r11i1p1f1.day.zg.gn.v20190429|crd-esgf-drc.ec.gc.ca&dataset_id=CMIP6.CMIP.CCCma.CanESM5.historical.r10i1p1f1.day.va.gn.v20190429|crd-esgf-drc.ec.gc.ca&dataset_id=CMIP6.CMIP.CCCma.CanESM5.historical.r11i1p1f1.day.ua.gn.v20190429|crd-esgf-drc.ec.gc.ca&dataset_id=CMIP6.CMIP.CCCma.CanESM5.historical.r11i1p1f1.day.va.gn.v20190429|crd-esgf-drc.ec.gc.ca&dataset_id=CMIP6.CMIP.CCCma.CanESM5.historical.r10i1p1f1.day.ua.gn.v20190429|crd-esgf-drc.ec.gc.ca&dataset_id=CMIP6.CMIP.CCCma.CanESM5.historical.r11i1p1f1.day.ta.gn.v20190429|crd-esgf-drc.ec.gc.ca&dataset_id=CMIP6.CMIP.CCCma.CanESM5.historical.r10i1p1f1.day.zg.gn.v20190429|crd-esgf-drc.ec.gc.ca&dataset_id=CMIP6.CMIP.CCCma.CanESM5.historical.r10i1p1f1.day.ta.gn.v20190429|crd-esgf-drc.ec.gc.ca
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='https://esgf-node.llnl.gov/esg-search/wget/?distrib=false&dataset_id=CMIP6.CMIP.CCCma.CanESM5.historical.r11i1p1f1.day.zg.gn.v20190429|crd-esgf-drc.ec.gc.ca&dataset_id=CMIP6.CMIP.CCCma.CanESM5.historical.r10i1p1f1.day.va.gn.v20190429|crd-esgf-drc.ec.gc.ca&dataset_id=CMIP6.CMIP.CCCma.CanESM5.historical.r11i1p1f1.day.ua.gn.v20190429|crd-esgf-drc.ec.gc.ca&dataset_id=CMIP6.CMIP.CCCma.CanESM5.historical.r11i1p1f1.day.va.gn.v20190429|crd-esgf-drc.ec.gc.ca&dataset_id=CMIP6.CMIP.CCCma.CanESM5.historical.r10i1p1f1.day.ua.gn.v20190429|crd-esgf-drc.ec.gc.ca&dataset_id=CMIP6.CMIP.CCCma.CanESM5.historical.r11i1p1f1.day.ta.gn.v20190429|crd-esgf-drc.ec.gc.ca&dataset_id=CMIP6.CMIP.CCCma.CanESM5.historical.r10i1p1f1.day.zg.gn.v20190429|crd-esgf-drc.ec.gc.ca&dataset_id=CMIP6.CMIP.CCCma.CanESM5.historical.r10i1p1f1.day.ta.gn.v20190429|crd-esgf-drc.ec.gc.ca'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'ta_day_CanESM5_historical_r10i1p1f1_gn_18500101-18601231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/ta/gn/v20190429/ta_day_CanESM5_historical_r10i1p1f1_gn_18500101-18601231.nc' 'SHA256' '157336777f856d9c6df24eca3b38237f15380f5cce74ed34655cc31e4560eaff'
'ta_day_CanESM5_historical_r10i1p1f1_gn_18610101-18701231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/ta/gn/v20190429/ta_day_CanESM5_historical_r10i1p1f1_gn_18610101-18701231.nc' 'SHA256' '7acb0fb503042b996ce67c9901963df6f0a36ba10a0050fecc4a78450e495f4c'
'ta_day_CanESM5_historical_r10i1p1f1_gn_18710101-18801231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/ta/gn/v20190429/ta_day_CanESM5_historical_r10i1p1f1_gn_18710101-18801231.nc' 'SHA256' '8d83b687f3d916226adf3d938201a702816eb6ae7329ee8415b03fc10d1b6cc2'
'ta_day_CanESM5_historical_r10i1p1f1_gn_18810101-18901231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/ta/gn/v20190429/ta_day_CanESM5_historical_r10i1p1f1_gn_18810101-18901231.nc' 'SHA256' '7766ca2b0c7e3a005d7d6e66e2541691d7e857f8b6c4cf02e5e40dbfd9372da6'
'ta_day_CanESM5_historical_r10i1p1f1_gn_18910101-19001231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/ta/gn/v20190429/ta_day_CanESM5_historical_r10i1p1f1_gn_18910101-19001231.nc' 'SHA256' '7db6c70c4d79d5b696d581f41cb980ad7db2b10c0d4d3ea5c9ccae1e00d16ad9'
'ta_day_CanESM5_historical_r10i1p1f1_gn_19010101-19101231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/ta/gn/v20190429/ta_day_CanESM5_historical_r10i1p1f1_gn_19010101-19101231.nc' 'SHA256' '2d38135aa78effee37ddc04651417e48ad2e5de995d9d0a6ac0ca4af99ccbb1b'
'ta_day_CanESM5_historical_r10i1p1f1_gn_19110101-19201231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/ta/gn/v20190429/ta_day_CanESM5_historical_r10i1p1f1_gn_19110101-19201231.nc' 'SHA256' '2864b6ff78705098a059760e5a0c42534574d3a9867195ff6f63bd27a25a634e'
'ta_day_CanESM5_historical_r10i1p1f1_gn_19210101-19301231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/ta/gn/v20190429/ta_day_CanESM5_historical_r10i1p1f1_gn_19210101-19301231.nc' 'SHA256' '5ed4b6065b4a7ce41f22da9747db335e7ac446e9015040e3c89980f326822995'
'ta_day_CanESM5_historical_r10i1p1f1_gn_19310101-19401231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/ta/gn/v20190429/ta_day_CanESM5_historical_r10i1p1f1_gn_19310101-19401231.nc' 'SHA256' '002bb3b127201fabcdec9b81d5b5f6d973bd3c7e98f52b571ec2ab43d307481c'
'ta_day_CanESM5_historical_r10i1p1f1_gn_19410101-19501231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/ta/gn/v20190429/ta_day_CanESM5_historical_r10i1p1f1_gn_19410101-19501231.nc' 'SHA256' '6a6a4ae0c63f5778a59b5d96cc2419d113553e9a209accce374b8c612fc2f3d5'
'ta_day_CanESM5_historical_r10i1p1f1_gn_19510101-19601231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/ta/gn/v20190429/ta_day_CanESM5_historical_r10i1p1f1_gn_19510101-19601231.nc' 'SHA256' '3489d59bafc8a3b8523e8c896db4515a0efb8fbcd274d969bf9c4678b15bfc52'
'ta_day_CanESM5_historical_r10i1p1f1_gn_19610101-19701231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/ta/gn/v20190429/ta_day_CanESM5_historical_r10i1p1f1_gn_19610101-19701231.nc' 'SHA256' 'c981a545b64b9fc5d2ec87595b42c1455e69b642d488310e9e94af0bf95d0266'
'ta_day_CanESM5_historical_r10i1p1f1_gn_19710101-19801231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/ta/gn/v20190429/ta_day_CanESM5_historical_r10i1p1f1_gn_19710101-19801231.nc' 'SHA256' 'fb8667ac2072a994f65625544e00dde1d94273c65e2ef25d9e0ba18af3a91024'
'ta_day_CanESM5_historical_r10i1p1f1_gn_19810101-19901231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/ta/gn/v20190429/ta_day_CanESM5_historical_r10i1p1f1_gn_19810101-19901231.nc' 'SHA256' 'e95f78f3cfe614dee3f7585fbd1a2fa11d844b35e300dfda1c1bc019177f9995'
'ta_day_CanESM5_historical_r10i1p1f1_gn_19910101-20001231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/ta/gn/v20190429/ta_day_CanESM5_historical_r10i1p1f1_gn_19910101-20001231.nc' 'SHA256' 'e977e3712025fdea65641216516b01aec5147994626b90d128ee0ac810b6d9b2'
'ta_day_CanESM5_historical_r10i1p1f1_gn_20010101-20101231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/ta/gn/v20190429/ta_day_CanESM5_historical_r10i1p1f1_gn_20010101-20101231.nc' 'SHA256' '67597c0c291d60f01df2a8f6d822b7759a3b77a578ee8726ac270fd44ac03f5b'
'ta_day_CanESM5_historical_r10i1p1f1_gn_20110101-20141231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/ta/gn/v20190429/ta_day_CanESM5_historical_r10i1p1f1_gn_20110101-20141231.nc' 'SHA256' 'cd7a8b1d00659c2e13a0d7e36064dc5cb4e33b649555c27312999b28b2731dde'
'ua_day_CanESM5_historical_r10i1p1f1_gn_18500101-18601231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/ua/gn/v20190429/ua_day_CanESM5_historical_r10i1p1f1_gn_18500101-18601231.nc' 'SHA256' '8849367e4cb52d06035f422424c50b9cd31f9e181befb57b133d646d846334f0'
'ua_day_CanESM5_historical_r10i1p1f1_gn_18610101-18701231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/ua/gn/v20190429/ua_day_CanESM5_historical_r10i1p1f1_gn_18610101-18701231.nc' 'SHA256' 'cecccba9adfc98e27dea91c492029d38e00eba3c878189758b3b4c9c6317b2f5'
'ua_day_CanESM5_historical_r10i1p1f1_gn_18710101-18801231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/ua/gn/v20190429/ua_day_CanESM5_historical_r10i1p1f1_gn_18710101-18801231.nc' 'SHA256' '746aa3206254277ba11b122c50dbb945c872f1405917387dd7de2986a482bc52'
'ua_day_CanESM5_historical_r10i1p1f1_gn_18810101-18901231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/ua/gn/v20190429/ua_day_CanESM5_historical_r10i1p1f1_gn_18810101-18901231.nc' 'SHA256' '78bffd836c420e6f6e57afcc8adb35f04971cb5edbfa1e6f88a87f576a4d86f6'
'ua_day_CanESM5_historical_r10i1p1f1_gn_18910101-19001231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/ua/gn/v20190429/ua_day_CanESM5_historical_r10i1p1f1_gn_18910101-19001231.nc' 'SHA256' 'a1fd3ad5ad6c580ea17ae9c21b1294d2d9c4ae7633d2557e6abf13021be22dfa'
'ua_day_CanESM5_historical_r10i1p1f1_gn_19010101-19101231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/ua/gn/v20190429/ua_day_CanESM5_historical_r10i1p1f1_gn_19010101-19101231.nc' 'SHA256' '01b34dab5ed020dbf41ec83f2ebbb2371fa316a4d1f0ed9012929b1d3e65cc30'
'ua_day_CanESM5_historical_r10i1p1f1_gn_19110101-19201231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/ua/gn/v20190429/ua_day_CanESM5_historical_r10i1p1f1_gn_19110101-19201231.nc' 'SHA256' 'af45e2c68d9cbe61bb113bfc84baa563240e0c0e2d3af7a0b8e9387279a4df69'
'ua_day_CanESM5_historical_r10i1p1f1_gn_19210101-19301231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/ua/gn/v20190429/ua_day_CanESM5_historical_r10i1p1f1_gn_19210101-19301231.nc' 'SHA256' 'fcf3a1566995d44d6afe3242d0d29676ffaac81e72f01dfb48765d92046969ca'
'ua_day_CanESM5_historical_r10i1p1f1_gn_19310101-19401231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/ua/gn/v20190429/ua_day_CanESM5_historical_r10i1p1f1_gn_19310101-19401231.nc' 'SHA256' '6027e3169cc52b49737fc837ce57bf72683e77aa85fba300c34f5f45b3ff4e46'
'ua_day_CanESM5_historical_r10i1p1f1_gn_19410101-19501231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/ua/gn/v20190429/ua_day_CanESM5_historical_r10i1p1f1_gn_19410101-19501231.nc' 'SHA256' '6f7d74acbb76fa8331beab0c4d251ba428a42b779fe4f2d67853a1b615c706d2'
'ua_day_CanESM5_historical_r10i1p1f1_gn_19510101-19601231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/ua/gn/v20190429/ua_day_CanESM5_historical_r10i1p1f1_gn_19510101-19601231.nc' 'SHA256' '17630765becc545d4cc28c9d051e88dfcd66753146a6f30076192d60cc1d5d24'
'ua_day_CanESM5_historical_r10i1p1f1_gn_19610101-19701231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/ua/gn/v20190429/ua_day_CanESM5_historical_r10i1p1f1_gn_19610101-19701231.nc' 'SHA256' 'ac19e56605cf1c61b9d7a49df8533be273b0b9395d74535c2c32c4095a2aed94'
'ua_day_CanESM5_historical_r10i1p1f1_gn_19710101-19801231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/ua/gn/v20190429/ua_day_CanESM5_historical_r10i1p1f1_gn_19710101-19801231.nc' 'SHA256' 'c0692b7fce3e30e8695cc5ebb487f14dc6478a8a2e89c8b36d31f4f427c001ba'
'ua_day_CanESM5_historical_r10i1p1f1_gn_19810101-19901231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/ua/gn/v20190429/ua_day_CanESM5_historical_r10i1p1f1_gn_19810101-19901231.nc' 'SHA256' '52ac9703ea362cbd579aa56a94d195b27c40178fa91e28e162b42522f8123642'
'ua_day_CanESM5_historical_r10i1p1f1_gn_19910101-20001231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/ua/gn/v20190429/ua_day_CanESM5_historical_r10i1p1f1_gn_19910101-20001231.nc' 'SHA256' 'c00127901ec8a06fcbaf8fe7065e05cd27e9f3f9229a898e740e8c335b35ddd8'
'ua_day_CanESM5_historical_r10i1p1f1_gn_20010101-20101231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/ua/gn/v20190429/ua_day_CanESM5_historical_r10i1p1f1_gn_20010101-20101231.nc' 'SHA256' '1c67cdbba4c520d96852c3e04668ccbab7cd816cebfff286c4eff0eb5874c299'
'ua_day_CanESM5_historical_r10i1p1f1_gn_20110101-20141231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/ua/gn/v20190429/ua_day_CanESM5_historical_r10i1p1f1_gn_20110101-20141231.nc' 'SHA256' '0cc332f5eecef45fcded5ea1cd8d0b6be558069cdf4599089ecffedd9ab150f6'
'va_day_CanESM5_historical_r10i1p1f1_gn_18500101-18601231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/va/gn/v20190429/va_day_CanESM5_historical_r10i1p1f1_gn_18500101-18601231.nc' 'SHA256' '459359479c8d2e48005a227213d99a887dae2eaf0e9f30b1a7e9f06f1cb496c9'
'va_day_CanESM5_historical_r10i1p1f1_gn_18610101-18701231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/va/gn/v20190429/va_day_CanESM5_historical_r10i1p1f1_gn_18610101-18701231.nc' 'SHA256' '9c20ef670eef51f3673b7a5dba0829ae860d18ef984563f335d987aca0d80bf9'
'va_day_CanESM5_historical_r10i1p1f1_gn_18710101-18801231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/va/gn/v20190429/va_day_CanESM5_historical_r10i1p1f1_gn_18710101-18801231.nc' 'SHA256' 'd33fdb3097685f35bcacc499a1f01a1827a2e936ae38c8b06c325258bdc00fb7'
'va_day_CanESM5_historical_r10i1p1f1_gn_18810101-18901231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/va/gn/v20190429/va_day_CanESM5_historical_r10i1p1f1_gn_18810101-18901231.nc' 'SHA256' '6db0b9e51eaafbf7e04e6a4d1025db38d927a79c71c1881ae9302a3224e2f4e2'
'va_day_CanESM5_historical_r10i1p1f1_gn_18910101-19001231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/va/gn/v20190429/va_day_CanESM5_historical_r10i1p1f1_gn_18910101-19001231.nc' 'SHA256' '636da023d61814da39638d2e2ab812346de88d4631b4657d9cbb25b488db91ff'
'va_day_CanESM5_historical_r10i1p1f1_gn_19010101-19101231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/va/gn/v20190429/va_day_CanESM5_historical_r10i1p1f1_gn_19010101-19101231.nc' 'SHA256' '05076f32bae44a83c164da15266b6eab5b4ca78b87283e7e83507fa136fb7798'
'va_day_CanESM5_historical_r10i1p1f1_gn_19110101-19201231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/va/gn/v20190429/va_day_CanESM5_historical_r10i1p1f1_gn_19110101-19201231.nc' 'SHA256' 'e0725dd4f859ec5fdd7ef09d2e61da06fd8d47586263ff3e319667349924dc11'
'va_day_CanESM5_historical_r10i1p1f1_gn_19210101-19301231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/va/gn/v20190429/va_day_CanESM5_historical_r10i1p1f1_gn_19210101-19301231.nc' 'SHA256' 'e326bafeee747735da8aa66efd351338fb28fad959f8bea5766d57d70b85522e'
'va_day_CanESM5_historical_r10i1p1f1_gn_19310101-19401231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/va/gn/v20190429/va_day_CanESM5_historical_r10i1p1f1_gn_19310101-19401231.nc' 'SHA256' 'de703c59346815c839950898292c88f44ec813dc86c5fe45fa2cd5dae3841aed'
'va_day_CanESM5_historical_r10i1p1f1_gn_19410101-19501231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/va/gn/v20190429/va_day_CanESM5_historical_r10i1p1f1_gn_19410101-19501231.nc' 'SHA256' '84b79b483159300d93927197780c8ffa32c54d92080edafbd6211c0141a5903a'
'va_day_CanESM5_historical_r10i1p1f1_gn_19510101-19601231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/va/gn/v20190429/va_day_CanESM5_historical_r10i1p1f1_gn_19510101-19601231.nc' 'SHA256' '87e06b3290afa44aa61faa7ae5ee5057789cfc92bcfb767bf804743cdd67937b'
'va_day_CanESM5_historical_r10i1p1f1_gn_19610101-19701231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/va/gn/v20190429/va_day_CanESM5_historical_r10i1p1f1_gn_19610101-19701231.nc' 'SHA256' 'bddd9c78e046cec156cc01d461ab620af8e9099538ae84ab593c4b569002d61d'
'va_day_CanESM5_historical_r10i1p1f1_gn_19710101-19801231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/va/gn/v20190429/va_day_CanESM5_historical_r10i1p1f1_gn_19710101-19801231.nc' 'SHA256' 'dc50f4174d8e970c9e68b2f35042aad3a04d9a5f95c7e12cf0829bf958135d3f'
'va_day_CanESM5_historical_r10i1p1f1_gn_19810101-19901231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/va/gn/v20190429/va_day_CanESM5_historical_r10i1p1f1_gn_19810101-19901231.nc' 'SHA256' 'e1ea643d80f8ccab52dd5594b57b17a396fbb4de888277c5d73b3f4b2d647301'
'va_day_CanESM5_historical_r10i1p1f1_gn_19910101-20001231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/va/gn/v20190429/va_day_CanESM5_historical_r10i1p1f1_gn_19910101-20001231.nc' 'SHA256' 'aa5f97e857d5d9feb2cab3c72944c2eebef156e62f601695b0d373f912067e96'
'va_day_CanESM5_historical_r10i1p1f1_gn_20010101-20101231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/va/gn/v20190429/va_day_CanESM5_historical_r10i1p1f1_gn_20010101-20101231.nc' 'SHA256' '4c8cf3f4fafa6f27dbb7efceff7fba9efc00982be3a857bd6aa5de70b6f4c040'
'va_day_CanESM5_historical_r10i1p1f1_gn_20110101-20141231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/va/gn/v20190429/va_day_CanESM5_historical_r10i1p1f1_gn_20110101-20141231.nc' 'SHA256' '901f4c1a09633355e4deca02ff3ba81b31b5e6c04967838db19539af1f587526'
'zg_day_CanESM5_historical_r10i1p1f1_gn_18500101-18601231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/zg/gn/v20190429/zg_day_CanESM5_historical_r10i1p1f1_gn_18500101-18601231.nc' 'SHA256' 'c44c9234577097fddbe89025250f339f1f85810b6ca100c78b54305a6d46b1f6'
'zg_day_CanESM5_historical_r10i1p1f1_gn_18610101-18701231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/zg/gn/v20190429/zg_day_CanESM5_historical_r10i1p1f1_gn_18610101-18701231.nc' 'SHA256' 'be41c7c8bdc4cf1f721c39bc9f809e5ff3598c4e886572f2e62ef89e58901d17'
'zg_day_CanESM5_historical_r10i1p1f1_gn_18710101-18801231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/zg/gn/v20190429/zg_day_CanESM5_historical_r10i1p1f1_gn_18710101-18801231.nc' 'SHA256' 'c649fc02c182a80d27a5c9d4247a5cbf2351b2895f5d6ee9dbd0fa0198adff82'
'zg_day_CanESM5_historical_r10i1p1f1_gn_18810101-18901231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/zg/gn/v20190429/zg_day_CanESM5_historical_r10i1p1f1_gn_18810101-18901231.nc' 'SHA256' 'aa907a7e54ecfb8538aa0101b1fe56b3a87d49afdd0f30577fc1323cce96e26f'
'zg_day_CanESM5_historical_r10i1p1f1_gn_18910101-19001231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/zg/gn/v20190429/zg_day_CanESM5_historical_r10i1p1f1_gn_18910101-19001231.nc' 'SHA256' '849c9104d2c226feedbe823139173431a8f9910f2127d5a11dba1c3c6aa7c2aa'
'zg_day_CanESM5_historical_r10i1p1f1_gn_19010101-19101231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/zg/gn/v20190429/zg_day_CanESM5_historical_r10i1p1f1_gn_19010101-19101231.nc' 'SHA256' '365c963800029741ce06b5c35b1ddbd021d7573213e162f1bf63aa60f7677df7'
'zg_day_CanESM5_historical_r10i1p1f1_gn_19110101-19201231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/zg/gn/v20190429/zg_day_CanESM5_historical_r10i1p1f1_gn_19110101-19201231.nc' 'SHA256' 'ac0594c6ddc76533d0288a91a6144a5a098b060998d203e48dae84a737e4d290'
'zg_day_CanESM5_historical_r10i1p1f1_gn_19210101-19301231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/zg/gn/v20190429/zg_day_CanESM5_historical_r10i1p1f1_gn_19210101-19301231.nc' 'SHA256' '886754d2d2f0f837c709c3fe3682301975c23be8676c6f88225da21ebc83f386'
'zg_day_CanESM5_historical_r10i1p1f1_gn_19310101-19401231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/zg/gn/v20190429/zg_day_CanESM5_historical_r10i1p1f1_gn_19310101-19401231.nc' 'SHA256' '395bce5844b4df5f2ac1e0e3b22adf43eae060a2314c23d848d78ba95f00e3eb'
'zg_day_CanESM5_historical_r10i1p1f1_gn_19410101-19501231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/zg/gn/v20190429/zg_day_CanESM5_historical_r10i1p1f1_gn_19410101-19501231.nc' 'SHA256' '1196fe988326646a51d64087d391ffa47b84079bd8e1cca863b1d8e075096754'
'zg_day_CanESM5_historical_r10i1p1f1_gn_19510101-19601231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/zg/gn/v20190429/zg_day_CanESM5_historical_r10i1p1f1_gn_19510101-19601231.nc' 'SHA256' 'cce0165752a773f169909f14f130dafdb40426f01ae0e64646c36c634862a24b'
'zg_day_CanESM5_historical_r10i1p1f1_gn_19610101-19701231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/zg/gn/v20190429/zg_day_CanESM5_historical_r10i1p1f1_gn_19610101-19701231.nc' 'SHA256' '4016bb333485d163ad0510f6db600b3bef50a81ca6829103117511ab0cdeba69'
'zg_day_CanESM5_historical_r10i1p1f1_gn_19710101-19801231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/zg/gn/v20190429/zg_day_CanESM5_historical_r10i1p1f1_gn_19710101-19801231.nc' 'SHA256' 'fdba6d3a44cd9cb09c6c6e61f5d05c0292bec2b4ab1eb520c1df2f876e67475e'
'zg_day_CanESM5_historical_r10i1p1f1_gn_19810101-19901231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/zg/gn/v20190429/zg_day_CanESM5_historical_r10i1p1f1_gn_19810101-19901231.nc' 'SHA256' 'c0cf177c71b70f3166e997bec0939096ff80417cd3060ceb880448acac647c8f'
'zg_day_CanESM5_historical_r10i1p1f1_gn_19910101-20001231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/zg/gn/v20190429/zg_day_CanESM5_historical_r10i1p1f1_gn_19910101-20001231.nc' 'SHA256' '176eee0cd5325e04791c86c3fcefc8a561c84bf7bec2530d9afa2406cc0c7df8'
'zg_day_CanESM5_historical_r10i1p1f1_gn_20010101-20101231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/zg/gn/v20190429/zg_day_CanESM5_historical_r10i1p1f1_gn_20010101-20101231.nc' 'SHA256' 'c83de59fc1b80970caa7cfbdce51803f95beee7d044f8468b8f4b87d64bee525'
'zg_day_CanESM5_historical_r10i1p1f1_gn_20110101-20141231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r10i1p1f1/day/zg/gn/v20190429/zg_day_CanESM5_historical_r10i1p1f1_gn_20110101-20141231.nc' 'SHA256' '2d008fc7c818c168527508e50bc3838a127ae278226ada38ab30b4774548f84e'
'ta_day_CanESM5_historical_r11i1p1f1_gn_18500101-18601231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/ta/gn/v20190429/ta_day_CanESM5_historical_r11i1p1f1_gn_18500101-18601231.nc' 'SHA256' '4bf9119eb1023b80be935e1d4a7f2f47f383abde216accc36c044aa7cf8f6063'
'ta_day_CanESM5_historical_r11i1p1f1_gn_18610101-18701231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/ta/gn/v20190429/ta_day_CanESM5_historical_r11i1p1f1_gn_18610101-18701231.nc' 'SHA256' '1e87163e42866a87f0773a870cdc36dcff1dbdadd42ccc9f5ae036b50c8b2f0a'
'ta_day_CanESM5_historical_r11i1p1f1_gn_18710101-18801231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/ta/gn/v20190429/ta_day_CanESM5_historical_r11i1p1f1_gn_18710101-18801231.nc' 'SHA256' 'a16251558f4222b1d69bfdd248d96321cbdef94c53f6627155ee4e59fd7ba499'
'ta_day_CanESM5_historical_r11i1p1f1_gn_18810101-18901231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/ta/gn/v20190429/ta_day_CanESM5_historical_r11i1p1f1_gn_18810101-18901231.nc' 'SHA256' '30e4d1e5af908d6b5580a14bf771f3f6b19645c627401335f983bbe79c14f62e'
'ta_day_CanESM5_historical_r11i1p1f1_gn_18910101-19001231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/ta/gn/v20190429/ta_day_CanESM5_historical_r11i1p1f1_gn_18910101-19001231.nc' 'SHA256' '1e48b5b59437f6ab5625860774d562ec2507c9f36372a102331c87b813aa9492'
'ta_day_CanESM5_historical_r11i1p1f1_gn_19010101-19101231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/ta/gn/v20190429/ta_day_CanESM5_historical_r11i1p1f1_gn_19010101-19101231.nc' 'SHA256' 'a7140ab285747074fb7ff4bef98b7f2f7ba8701cbfade58df0ae9a9a13f5a28a'
'ta_day_CanESM5_historical_r11i1p1f1_gn_19110101-19201231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/ta/gn/v20190429/ta_day_CanESM5_historical_r11i1p1f1_gn_19110101-19201231.nc' 'SHA256' '92c4b9eb953351a0433e14b0f01c8b53bb2d4295a982d191fae5b56e183726d8'
'ta_day_CanESM5_historical_r11i1p1f1_gn_19210101-19301231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/ta/gn/v20190429/ta_day_CanESM5_historical_r11i1p1f1_gn_19210101-19301231.nc' 'SHA256' '7fd94c6dd43839668928093d7d7e13c579dc7e2c096f1666e7941d278b2d4ecf'
'ta_day_CanESM5_historical_r11i1p1f1_gn_19310101-19401231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/ta/gn/v20190429/ta_day_CanESM5_historical_r11i1p1f1_gn_19310101-19401231.nc' 'SHA256' '981e797bb68c3807ad12f663b2ae63a662ff394499a3d74a2736a535251e5042'
'ta_day_CanESM5_historical_r11i1p1f1_gn_19410101-19501231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/ta/gn/v20190429/ta_day_CanESM5_historical_r11i1p1f1_gn_19410101-19501231.nc' 'SHA256' '0e9013d41afe633e6629aaf8be46908935d9080ff8bdd6c5a1da1e99be865f0a'
'ta_day_CanESM5_historical_r11i1p1f1_gn_19510101-19601231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/ta/gn/v20190429/ta_day_CanESM5_historical_r11i1p1f1_gn_19510101-19601231.nc' 'SHA256' '35a318a70eca706d3c9c1f6b4caa30c37a4a150ba55c4988434026b964fd533e'
'ta_day_CanESM5_historical_r11i1p1f1_gn_19610101-19701231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/ta/gn/v20190429/ta_day_CanESM5_historical_r11i1p1f1_gn_19610101-19701231.nc' 'SHA256' '67c76999bcd274c04aef9780e7035c24c5c5655d5147c48e2efcdc22a6744bb2'
'ta_day_CanESM5_historical_r11i1p1f1_gn_19710101-19801231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/ta/gn/v20190429/ta_day_CanESM5_historical_r11i1p1f1_gn_19710101-19801231.nc' 'SHA256' '666992989a5143e466f2817332c0d6e817a291e8ffe24124420767676c4e9f07'
'ta_day_CanESM5_historical_r11i1p1f1_gn_19810101-19901231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/ta/gn/v20190429/ta_day_CanESM5_historical_r11i1p1f1_gn_19810101-19901231.nc' 'SHA256' 'ec5db886aae298d10cb9a295e1fd6028a3b3968cdb96481fbc25fb9e302dd2e3'
'ta_day_CanESM5_historical_r11i1p1f1_gn_19910101-20001231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/ta/gn/v20190429/ta_day_CanESM5_historical_r11i1p1f1_gn_19910101-20001231.nc' 'SHA256' '3164aafa94019f53f2db95ba04168ad3a146334e742e0d44e02b0b33798ea3e3'
'ta_day_CanESM5_historical_r11i1p1f1_gn_20010101-20101231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/ta/gn/v20190429/ta_day_CanESM5_historical_r11i1p1f1_gn_20010101-20101231.nc' 'SHA256' 'a868584b0fb03b5407777396197927da5a07095d72eed089091cf166edfe38f7'
'ta_day_CanESM5_historical_r11i1p1f1_gn_20110101-20141231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/ta/gn/v20190429/ta_day_CanESM5_historical_r11i1p1f1_gn_20110101-20141231.nc' 'SHA256' '66df2a3cc8ee804143da988d53bacfb2e3e2dec1a09bf2f914e6de6ba3130ad6'
'ua_day_CanESM5_historical_r11i1p1f1_gn_18500101-18601231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/ua/gn/v20190429/ua_day_CanESM5_historical_r11i1p1f1_gn_18500101-18601231.nc' 'SHA256' '993a62b69882fc6891990da86d67156dd8a4717a93cf0aff0bca6a73194972b2'
'ua_day_CanESM5_historical_r11i1p1f1_gn_18610101-18701231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/ua/gn/v20190429/ua_day_CanESM5_historical_r11i1p1f1_gn_18610101-18701231.nc' 'SHA256' '713d903fec34fdbea4d44c4f1a859d3c7e4eeaef03a06f3e5cfbe8535fed5fc1'
'ua_day_CanESM5_historical_r11i1p1f1_gn_18710101-18801231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/ua/gn/v20190429/ua_day_CanESM5_historical_r11i1p1f1_gn_18710101-18801231.nc' 'SHA256' 'a783f7ffcb6d95eda251e7019a6710d93d653ecfa6145fd93f84e3ff3f0c904f'
'ua_day_CanESM5_historical_r11i1p1f1_gn_18810101-18901231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/ua/gn/v20190429/ua_day_CanESM5_historical_r11i1p1f1_gn_18810101-18901231.nc' 'SHA256' '01ea39151bc6d01caf80960d7e7bf006a6c93e2941be24d3072f4ab7460540e1'
'ua_day_CanESM5_historical_r11i1p1f1_gn_18910101-19001231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/ua/gn/v20190429/ua_day_CanESM5_historical_r11i1p1f1_gn_18910101-19001231.nc' 'SHA256' 'b01ee77372d9d9af03d56f5bee3c2918ac6ca03abe77a2f592b2dbffecdf9265'
'ua_day_CanESM5_historical_r11i1p1f1_gn_19010101-19101231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/ua/gn/v20190429/ua_day_CanESM5_historical_r11i1p1f1_gn_19010101-19101231.nc' 'SHA256' '93a503924c077fd462507d885da3d0c481f6865fac656a67ac3d2d1aa394c059'
'ua_day_CanESM5_historical_r11i1p1f1_gn_19110101-19201231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/ua/gn/v20190429/ua_day_CanESM5_historical_r11i1p1f1_gn_19110101-19201231.nc' 'SHA256' '0d771816e7ea618918f18790678ae86507c09fa986dd3f2cbeeb74c89798413f'
'ua_day_CanESM5_historical_r11i1p1f1_gn_19210101-19301231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/ua/gn/v20190429/ua_day_CanESM5_historical_r11i1p1f1_gn_19210101-19301231.nc' 'SHA256' '9514aa2a6a7a869916eddcdb84884ad0498d5c7d034a9b35b8ad4c403bf928cd'
'ua_day_CanESM5_historical_r11i1p1f1_gn_19310101-19401231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/ua/gn/v20190429/ua_day_CanESM5_historical_r11i1p1f1_gn_19310101-19401231.nc' 'SHA256' '6a1a9c29a56c1896018a74090201c39737cc244e0afb37b00ae64168c5a7414b'
'ua_day_CanESM5_historical_r11i1p1f1_gn_19410101-19501231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/ua/gn/v20190429/ua_day_CanESM5_historical_r11i1p1f1_gn_19410101-19501231.nc' 'SHA256' '2c70a37ead62329efbee99defa9ecc6cb7403a144098758be7178d924c3dc08e'
'ua_day_CanESM5_historical_r11i1p1f1_gn_19510101-19601231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/ua/gn/v20190429/ua_day_CanESM5_historical_r11i1p1f1_gn_19510101-19601231.nc' 'SHA256' '8c450eaca269f3a98012e290abe217f950fa10a9ea5a4c4110b1dd47ebbc8b77'
'ua_day_CanESM5_historical_r11i1p1f1_gn_19610101-19701231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/ua/gn/v20190429/ua_day_CanESM5_historical_r11i1p1f1_gn_19610101-19701231.nc' 'SHA256' '260c5e80a24b79384232884571721de6c08c5c0e7cda3d6f9fcabef7834586cb'
'ua_day_CanESM5_historical_r11i1p1f1_gn_19710101-19801231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/ua/gn/v20190429/ua_day_CanESM5_historical_r11i1p1f1_gn_19710101-19801231.nc' 'SHA256' 'e62d5ecb6907eb06a62298e649e20a1740108f416e7782f5113d464eca74e34e'
'ua_day_CanESM5_historical_r11i1p1f1_gn_19810101-19901231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/ua/gn/v20190429/ua_day_CanESM5_historical_r11i1p1f1_gn_19810101-19901231.nc' 'SHA256' 'b9688ffe39ebe2f4e6344fbd6cbf5e08c4bfbe15cbe90f51a1e7ad9b3f00393e'
'ua_day_CanESM5_historical_r11i1p1f1_gn_19910101-20001231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/ua/gn/v20190429/ua_day_CanESM5_historical_r11i1p1f1_gn_19910101-20001231.nc' 'SHA256' '4ea2f80ffaaa31bf3e78cde4b984b712466b9b7015d53f6f3212b3fa572e42e6'
'ua_day_CanESM5_historical_r11i1p1f1_gn_20010101-20101231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/ua/gn/v20190429/ua_day_CanESM5_historical_r11i1p1f1_gn_20010101-20101231.nc' 'SHA256' 'e2466535acf4953c768cc99e60132cfee06e6a5799d8ee9f7485854e91b1b04c'
'ua_day_CanESM5_historical_r11i1p1f1_gn_20110101-20141231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/ua/gn/v20190429/ua_day_CanESM5_historical_r11i1p1f1_gn_20110101-20141231.nc' 'SHA256' 'f8574323ec10470e971d8a20fcf881eb67a8ab50e79a10686b6686f541027d17'
'va_day_CanESM5_historical_r11i1p1f1_gn_18500101-18601231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/va/gn/v20190429/va_day_CanESM5_historical_r11i1p1f1_gn_18500101-18601231.nc' 'SHA256' 'df5ff146e947b0936af13e3da1c2ccccbef491268b92257bbc48cdbec0af5d71'
'va_day_CanESM5_historical_r11i1p1f1_gn_18610101-18701231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/va/gn/v20190429/va_day_CanESM5_historical_r11i1p1f1_gn_18610101-18701231.nc' 'SHA256' '52e63e753eb5c70c688e246acc062a5bbd38f2ea2e2fd95f97d6acd8d56eeefa'
'va_day_CanESM5_historical_r11i1p1f1_gn_18710101-18801231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/va/gn/v20190429/va_day_CanESM5_historical_r11i1p1f1_gn_18710101-18801231.nc' 'SHA256' '50a5f014d6315faaed9111e0daf75eb6b6dff57fc628e530b489af169c3c1e08'
'va_day_CanESM5_historical_r11i1p1f1_gn_18810101-18901231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/va/gn/v20190429/va_day_CanESM5_historical_r11i1p1f1_gn_18810101-18901231.nc' 'SHA256' 'd5eef57ddeff091f3d471ff2f5ac5810e0d6e070833b70ccf6c4027ef72c1e85'
'va_day_CanESM5_historical_r11i1p1f1_gn_18910101-19001231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/va/gn/v20190429/va_day_CanESM5_historical_r11i1p1f1_gn_18910101-19001231.nc' 'SHA256' '3742403358bf0ba9972273834cc780200013f97c8c19c5b7d39135125ffb7934'
'va_day_CanESM5_historical_r11i1p1f1_gn_19010101-19101231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/va/gn/v20190429/va_day_CanESM5_historical_r11i1p1f1_gn_19010101-19101231.nc' 'SHA256' '30cb8e4d69be82f5c1bc5cb109111e2e1842c50594424529a2410769a0320a99'
'va_day_CanESM5_historical_r11i1p1f1_gn_19110101-19201231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/va/gn/v20190429/va_day_CanESM5_historical_r11i1p1f1_gn_19110101-19201231.nc' 'SHA256' '4565598878850d570c9bd2e01e7bf9de6b08a58b088e166d8782f0aac3c1c9f4'
'va_day_CanESM5_historical_r11i1p1f1_gn_19210101-19301231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/va/gn/v20190429/va_day_CanESM5_historical_r11i1p1f1_gn_19210101-19301231.nc' 'SHA256' '170dc09e6b770f7a0f493f295d643beff7c376be2ba295d45666b0945928f850'
'va_day_CanESM5_historical_r11i1p1f1_gn_19310101-19401231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/va/gn/v20190429/va_day_CanESM5_historical_r11i1p1f1_gn_19310101-19401231.nc' 'SHA256' '49ebe070a2b1ec16020e188af581ded966648f67ae8fc0c034eccc6d7b3a0edb'
'va_day_CanESM5_historical_r11i1p1f1_gn_19410101-19501231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/va/gn/v20190429/va_day_CanESM5_historical_r11i1p1f1_gn_19410101-19501231.nc' 'SHA256' 'e5841d418c529bd443814419775dcb6ed0ba114fae9cbf09447cb920f8b4fcb1'
'va_day_CanESM5_historical_r11i1p1f1_gn_19510101-19601231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/va/gn/v20190429/va_day_CanESM5_historical_r11i1p1f1_gn_19510101-19601231.nc' 'SHA256' '8a7b8f09fe89a8a54a588e19f52dde7d17065012aa0f98d2b0a7fba9dc7ec82d'
'va_day_CanESM5_historical_r11i1p1f1_gn_19610101-19701231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/va/gn/v20190429/va_day_CanESM5_historical_r11i1p1f1_gn_19610101-19701231.nc' 'SHA256' '043386cf0c5b6545442e023765d0588b66762560283e9e83e154179f82cc6a15'
'va_day_CanESM5_historical_r11i1p1f1_gn_19710101-19801231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/va/gn/v20190429/va_day_CanESM5_historical_r11i1p1f1_gn_19710101-19801231.nc' 'SHA256' '889a9bd59cf566dec44a8f814d1b600980f5170ffff00ed64ec4503341aeae5e'
'va_day_CanESM5_historical_r11i1p1f1_gn_19810101-19901231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/va/gn/v20190429/va_day_CanESM5_historical_r11i1p1f1_gn_19810101-19901231.nc' 'SHA256' '9e7ceacd087b1faf206d27fbc5fba0f09860b6e1a3877d23da5bb4b3e2a27b5b'
'va_day_CanESM5_historical_r11i1p1f1_gn_19910101-20001231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/va/gn/v20190429/va_day_CanESM5_historical_r11i1p1f1_gn_19910101-20001231.nc' 'SHA256' 'b62513509992e423c3deeea818eb433567d614ff21501823239da2d2f394bffd'
'va_day_CanESM5_historical_r11i1p1f1_gn_20010101-20101231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/va/gn/v20190429/va_day_CanESM5_historical_r11i1p1f1_gn_20010101-20101231.nc' 'SHA256' '022cb95c266d8649baefffb573268e1a7198f2152d00fce3256c5cfd5aa6c00a'
'va_day_CanESM5_historical_r11i1p1f1_gn_20110101-20141231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/va/gn/v20190429/va_day_CanESM5_historical_r11i1p1f1_gn_20110101-20141231.nc' 'SHA256' '48cc22db3424f33bc8789384e7d66dd3ef5a066c9ebb8e2898321ef252a58495'
'zg_day_CanESM5_historical_r11i1p1f1_gn_18500101-18601231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/zg/gn/v20190429/zg_day_CanESM5_historical_r11i1p1f1_gn_18500101-18601231.nc' 'SHA256' 'f0084f7552a43b40d4c3344a31cdf342615647ede0382b9d1795d4bf0b222ef4'
'zg_day_CanESM5_historical_r11i1p1f1_gn_18610101-18701231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/zg/gn/v20190429/zg_day_CanESM5_historical_r11i1p1f1_gn_18610101-18701231.nc' 'SHA256' '933de4a80692261d176fbf93d42573709b1230909f545f30ae1061e568b618c1'
'zg_day_CanESM5_historical_r11i1p1f1_gn_18710101-18801231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/zg/gn/v20190429/zg_day_CanESM5_historical_r11i1p1f1_gn_18710101-18801231.nc' 'SHA256' '5b523dc9a7c347f0c689d6cdd9d51cc43dc26eafec1442ddd4a30335f0cbd0b0'
'zg_day_CanESM5_historical_r11i1p1f1_gn_18810101-18901231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/zg/gn/v20190429/zg_day_CanESM5_historical_r11i1p1f1_gn_18810101-18901231.nc' 'SHA256' '61a2ea07bd26824b0d29d8e07822bd15112a01ffd021ddc89d8fee5b7eac46c8'
'zg_day_CanESM5_historical_r11i1p1f1_gn_18910101-19001231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/zg/gn/v20190429/zg_day_CanESM5_historical_r11i1p1f1_gn_18910101-19001231.nc' 'SHA256' '37933cfc69bccaf84be19da0d2df6e810454da085377bb9abb6071ddb9825142'
'zg_day_CanESM5_historical_r11i1p1f1_gn_19010101-19101231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/zg/gn/v20190429/zg_day_CanESM5_historical_r11i1p1f1_gn_19010101-19101231.nc' 'SHA256' 'b4882303b5fe8932fa069f66ee482509d2431ab65cdd02e43048a0de1289814e'
'zg_day_CanESM5_historical_r11i1p1f1_gn_19110101-19201231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/zg/gn/v20190429/zg_day_CanESM5_historical_r11i1p1f1_gn_19110101-19201231.nc' 'SHA256' '12b5325a17b5c35c889eb05ba701a2961640707db786433579701f9260ede8d0'
'zg_day_CanESM5_historical_r11i1p1f1_gn_19210101-19301231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/zg/gn/v20190429/zg_day_CanESM5_historical_r11i1p1f1_gn_19210101-19301231.nc' 'SHA256' 'a4466cdbe089dcb4293c44583badbeba3cfaed6f6a3d3d94ccd0cdc1b6f180e0'
'zg_day_CanESM5_historical_r11i1p1f1_gn_19310101-19401231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/zg/gn/v20190429/zg_day_CanESM5_historical_r11i1p1f1_gn_19310101-19401231.nc' 'SHA256' '352ef79b260b7ac9351f7225581c642a0dbf9f64f6498393437ff1751c24ac69'
'zg_day_CanESM5_historical_r11i1p1f1_gn_19410101-19501231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/zg/gn/v20190429/zg_day_CanESM5_historical_r11i1p1f1_gn_19410101-19501231.nc' 'SHA256' '2b1bf7cda571045597d8fcb17798ad5eaceb6959417bfc233e8c8db09705debc'
'zg_day_CanESM5_historical_r11i1p1f1_gn_19510101-19601231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/zg/gn/v20190429/zg_day_CanESM5_historical_r11i1p1f1_gn_19510101-19601231.nc' 'SHA256' 'd149bef2c89ccb5ec7531d5e0633c58ee2e6c82e711586cbc05f3f0cb18b9f10'
'zg_day_CanESM5_historical_r11i1p1f1_gn_19610101-19701231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/zg/gn/v20190429/zg_day_CanESM5_historical_r11i1p1f1_gn_19610101-19701231.nc' 'SHA256' '94fa8f17486e1c68a773677b4e823db86132132b93e242bb128e5e166cd6b963'
'zg_day_CanESM5_historical_r11i1p1f1_gn_19710101-19801231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/zg/gn/v20190429/zg_day_CanESM5_historical_r11i1p1f1_gn_19710101-19801231.nc' 'SHA256' '9d13b87a4c5ae0c75773c567219db9851e03c014b35b82485e3f71f6ab3140f6'
'zg_day_CanESM5_historical_r11i1p1f1_gn_19810101-19901231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/zg/gn/v20190429/zg_day_CanESM5_historical_r11i1p1f1_gn_19810101-19901231.nc' 'SHA256' '5b482bdf91580cf47e40c2b8b9db5e0f78ad8a065825a485caa579ddb4e9d3ff'
'zg_day_CanESM5_historical_r11i1p1f1_gn_19910101-20001231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/zg/gn/v20190429/zg_day_CanESM5_historical_r11i1p1f1_gn_19910101-20001231.nc' 'SHA256' '30b80da7fc8b08fbe94724b093beadda9cba9fa6110eeb1722a2a1351ff1470f'
'zg_day_CanESM5_historical_r11i1p1f1_gn_20010101-20101231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/zg/gn/v20190429/zg_day_CanESM5_historical_r11i1p1f1_gn_20010101-20101231.nc' 'SHA256' '0d204bb84b7941c669f62c5a921f0c14e215397e617284d5ea922c1e3a33ac72'
'zg_day_CanESM5_historical_r11i1p1f1_gn_20110101-20141231.nc' 'http://crd-esgf-drc.ec.gc.ca/thredds/fileServer/esgC_dataroot/AR6/CMIP6/CMIP/CCCma/CanESM5/historical/r11i1p1f1/day/zg/gn/v20190429/zg_day_CanESM5_historical_r11i1p1f1_gn_20110101-20141231.nc' 'SHA256' '995ee23ce365cd6b5f547601cd28e24a167c0897aaecc090ddb126d70423f71b'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else
    
        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Hello"
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 136 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
